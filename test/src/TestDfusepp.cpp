// Copyright 2021 - Bang & Olufsen a/s
#include "turtle/catch.hpp"
#include <catch.hpp>
#include "Dfusepp.h"

// The DFU image array is created using the following commands:
// $ echo Hello > boot.bin
// $ echo World > appl.bin
// $ ./dfu-convert -b 0x1a000000:boot.bin -b 0x1a010000:appl.bin image.dfu
// $ xxd -i image.dfu
std::array<uint8_t, 329> dfuImage {
    0x44, 0x66, 0x75, 0x53, 0x65, 0x01, 0x39, 0x01, 0x00, 0x00, 0x01, 0x54,
    0x61, 0x72, 0x67, 0x65, 0x74, 0x00, 0x01, 0x00, 0x00, 0x00, 0x53, 0x54,
    0x2e, 0x2e, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x1c, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x1a, 0x06, 0x00, 0x00, 0x00, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x0a, 0x00,
    0x00, 0x01, 0x1a, 0x06, 0x00, 0x00, 0x00, 0x57, 0x6f, 0x72, 0x6c, 0x64,
    0x0a, 0x00, 0x00, 0x11, 0xdf, 0x83, 0x04, 0x1a, 0x01, 0x55, 0x46, 0x44,
    0x10, 0x0d, 0xd7, 0xac, 0x66
};

TEST_CASE("Test Dfusepp with invalid image")
{
    Dfusepp::Dfusepp dfusepp;
    auto dfuImageInvalid = dfuImage;
    // Invalidate the image by lower casing the first letter
    dfuImageInvalid.at(293) = 'h';

    CHECK(dfusepp.addData(dfuImageInvalid.data(), 0, dfuImageInvalid.size()));

    SECTION("Check valid function")
    {
        CHECK_FALSE(dfusepp.valid());
    }
}

TEST_CASE("Test Dfusepp with valid image")
{
    Dfusepp::Dfusepp dfusepp;
    uint32_t firstChunk = 150;

    CHECK(dfusepp.addData(dfuImage.data(), 0, firstChunk));
    CHECK(dfusepp.addData(dfuImage.data() + firstChunk, firstChunk, dfuImage.size() - firstChunk));

    SECTION("Check version function")
    {
        CHECK(dfusepp.version() == 0);
    }

    SECTION("Check productId function")
    {
        CHECK(dfusepp.productId() == 0xdf11);
    }

    SECTION("Check vendorId function")
    {
        CHECK(dfusepp.vendorId() == 0x0483);
    }

    SECTION("Check valid function")
    {
        CHECK(dfusepp.valid());
    }

    SECTION("Check targetName function")
    {
        CHECK(dfusepp.targetName() == "ST...");
    }

    SECTION("Check images function")
    {
        std::vector<Dfusepp::ImageElement> images = dfusepp.images();
        CHECK(images.size() == 2);
        CHECK(images.at(0).Value.address == 0x1a000000);
        CHECK(images.at(0).Value.size == (strlen("Hello") + 1));
        CHECK(images.at(0).offset == 293);
        CHECK(images.at(1).Value.address == 0x1a010000);
        CHECK(images.at(1).Value.size == (strlen("World") + 1));
        CHECK(images.at(1).offset == 307);
    }

    SECTION("Check size function")
    {
        CHECK(dfusepp.size() == dfuImage.size());
    }
}
